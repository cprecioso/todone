import * as github from "@actions/github";
import { toHtml } from "hast-util-to-html";
import { h } from "hastscript";
import { toMarkdown } from "mdast-util-to-markdown";
import pMap from "p-map";
import { u } from "unist-builder";
import * as md from "../markdown";
import { ExpiredResult, formatDate } from "../util";
import { createIssueData } from "./issue-data";

export const generateIssue = async ({
  result: { url, result, matches },
}: ExpiredResult) => {
  const urlString = url.toString();
  const title = `TODO: ${result.title ?? urlString}`;

  const body = toMarkdown(
    u("root", [
      u("paragraph", [
        u("text", "The following TODO has expired"),
        ...(result.expirationDate
          ? [
              u("text", ` as of `),
              u(
                "html",
                toHtml(
                  h(
                    "time",
                    { datetime: result.expirationDate.toISOString() },
                    formatDate(result.expirationDate),
                  ),
                ),
              ),
            ]
          : []),
        u("text", ":"),
      ]),

      urlString.startsWith(github.context.serverUrl)
        ? u("list", [u("listItem", [u("paragraph", [u("text", urlString)])])])
        : u("paragraph", [
            u("link", { url: urlString }, [
              u("text", result.title ?? urlString),
            ]),
          ]),

      u("paragraph", [u("text", "It is present in the following files:")]),

      u(
        "list",
        await pMap(
          matches,
          async (match) => {
            const fileUrl = await match.file.getUrl(match.position.line);

            return u("listItem", [
              u("paragraph", [
                fileUrl
                  ? u("link", { url: fileUrl }, [u("text", fileUrl)])
                  : u(
                      "text",
                      `${match.file.location}:${match.position.line}:${match.position.column}`,
                    ),
              ]),
            ]);
          },
          { concurrency: 1 },
        ),
      ),

      u("thematicBreak", []),

      u("paragraph", [
        u("text", "This issue has been automatically created by "),
        u("inlineCode", { value: "todone" }),
        u("text", "."),
      ]),

      md.createComment(
        "Please do not the following comment, it is automatically generated by todone.",
      ),

      ...createIssueData({ todoUrl: urlString }),
    ]),
  );

  return { todoUrl: urlString, title, body };
};

export type IssueDefinition = Awaited<ReturnType<typeof generateIssue>>;
